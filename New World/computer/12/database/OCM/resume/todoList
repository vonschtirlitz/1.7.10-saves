todoList = {
  "for k, v in ipairs(SlotCalculator(\"_\")) do\
      if settings.Autofuel and not keptCoal and Version >= 1.64 and turtle.getItemDetail(v).name == \"minecraft:coal\" then\
        keptCoal = true\
      elseif not keptCobble and v == \"minecraft:cobblestone\" then\
        keptCobble = true\
      else\
        turtle.select(v)\
        while not turtle.dropDown() and turtle.getItemCount() ~= 0 do\
          print(lang.status(settings.language, 3))\
          sleep(10)\
        end\
      end\
    end",
  "for Way_Back = 1, variables.CrosswayAmount*settings.tunnelspace do\
      Freeway()\
    end",
  "print(lang.status(settings.language, 4))",
  "mainstep(settings.tunnelspace, false)",
  "turtle.turnRight()",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1+2)%4+1]",
  "variables.orientation[2] = old_orientation[(2+2)%4+1]",
  "variables.orientation[3] = old_orientation[(3+2)%4+1]",
  "variables.orientation[4] = old_orientation[(4+2)%4+1]",
  "youJustGotLittUp(settings.length, stepAside)",
  "if variables.level == 1 then\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
    insert('FreewayDown()')\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
  else\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
    insert('FreewayUp()')\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
  end",
  "face(3)",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1+1)%4+1]",
  "variables.orientation[2] = old_orientation[(2+1)%4+1]",
  "variables.orientation[3] = old_orientation[(3+1)%4+1]",
  "variables.orientation[4] = old_orientation[(4+1)%4+1]",
  "variables.direction = 1",
  "youJustGotLittUp(settings.length, compStep)",
  "youJustGotLittUp(settings.length, stepAside, true)",
  "if variables.level == 1 then\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
    insert('FreewayDown()')\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
  else\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
    insert('FreewayUp()')\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
  end",
  "face(3)",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1+1)%4+1]",
  "variables.orientation[2] = old_orientation[(2+1)%4+1]",
  "variables.orientation[3] = old_orientation[(3+1)%4+1]",
  "variables.orientation[4] = old_orientation[(4+1)%4+1]",
  "variables.direction = 1",
  "youJustGotLittUp(settings.length, compStep, true)",
  "turtle.turnLeft()",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1)%4+1]",
  "variables.orientation[2] = old_orientation[(2)%4+1]",
  "variables.orientation[3] = old_orientation[(3)%4+1]",
  "variables.orientation[4] = old_orientation[(4)%4+1]",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "print(lang.status(settings.language, 9))",
  "turn()",
  "if variables.level == 1 then\
    FreewayDown()\
  end",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "NormalChest(true, true)",
  "local endDay = os.day()\
  local endTime = os.time()\
  variables.stats[\"time\"] = (endDay-variables.startDay)*24.000+(endTime-variables.startTime)",
}
